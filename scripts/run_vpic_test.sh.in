#!/bin/bash

#
# Copyright (c) 2017, Carnegie Mellon University.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
# HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

### instant death on misc errors ###
set -euo pipefail

######################
# Tunable parameters #
######################

test_type=${1:-"baseline"}  ## or deltafs, shuffle_test, ...
ip_subnet=${2:-"10.92"}
nodes=${3:-"1"}
cores_per_node=${4:-"4"}
init_procs_per_node=${5:-"4"}
procs_per_node_increase_step=${6:-"4"}
num_vpic_dumps=${7:-"2"}
num_vpic_steps=${8:-"250"}
px_factor=${9:-"4"}
py_factor=${10:-"2"}
pz_factor=${11:-"0"}
bbos_buddies=${12:-"0"}
should_skip_query=${13:-"0"}
should_do_multipass_query=${14:-"0"}

###############
# Core script #
###############

source @CMAKE_INSTALL_PREFIX@/scripts/common.sh

### override default number of vpic timsteps ###
vpic_steps=$num_vpic_steps
### override default number of dumps ###
vpic_epochs=$num_vpic_dumps

message "Script begin..."
# keep track of start time so we can see how long this takes
timein=`date`

### lustre ###
get_jobdir
### bb ###
get_bbdir
### machine list ###
gen_hosts

### set read path ###
last=$should_do_multipass_query
if [ $should_skip_query -ne 0 ]
then
do_querying=0
else
do_querying=1
fi

procs_per_node=$init_procs_per_node
while [ $procs_per_node -le $cores_per_node ]
do
    cores=$((procs_per_node * nodes))
    px=$((cores * px_factor))
    py=$((10**py_factor))
    pz=$((10**pz_factor))
    parts=$((px * py * pz * 100))

    ### determine vpic input deck ###
    case $test_type in
    "baseline")
        deck="file-per-process"
        ;;

    *)
        deck="file-per-particle"
        ;;

    esac

    ### other options ###
    case $test_type in
    "shuffle_test")
        export BYPASS_WRITE=1
        ;;

    esac

    if [ ${BYPASS_WRITE:-0} -ne 0 ]; then
        do_querying=0
    fi
    build_deck $deck $px $py $pz
    message ""
    message ""

    do_run $test_type $parts $procs_per_node

    if [ $procs_per_node -eq 1 ]; then
        procs_per_node=$procs_per_node_increase_step
    else
        procs_per_node=$(( procs_per_node + procs_per_node_increase_step ))
    fi
done

# overall time
timeout=`date`

message "Script complete!"
message "start: ${timein}"
message "  end: ${timeout}"

exit 0
